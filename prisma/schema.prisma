// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agent {
  id      String @id @default(uuid())
  name    String
  phone   String
  address String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  docs       Docs[]
  investor   Investor @relation(fields: [investorId], references: [id])
  investorId String
}

model Property {
  id          String    @id @default(uuid())
  latinName   String
  digitalName Int       @unique
  floor       Int
  direction   String
  area        Float
  elevators   String[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  docs               Docs[]
  investor           Investor?           @relation(fields: [investorId], references: [id])
  investorId         String?
  MaintenanceExpense MaintenanceExpense?
}

model Investor {
  id      String  @id @default(uuid())
  name    String
  email   String  @unique
  code    Int     @unique @default(autoincrement())
  phone   String
  address String
  bank    Json[]
  agent   Agent[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user      User   @relation("updatedBy", fields: [updatedBy], references: [id])
  updatedBy String

  properties         Property[]
  investments        Investment[]
  Expensies          Expenses[]
  maintenanceExpense MaintenanceExpense[]
}

enum InvestmentType {
  BONDS
  CERTIFICATES
}

model Investment {
  id String @id @default(uuid())

  type                   InvestmentType
  amount                 Float          @default(0.0)
  interestRate           Float          @default(1.0)
  createdAt              DateTime       @default(now())
  redemptionDate         DateTime
  bank                   Json
  earlyRedemptionPenalty Float?         @default(0.0)
  customId               String?        @unique

  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  docs Docs[]

  investor   Investor @relation(fields: [investorId], references: [id])
  investorId String

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Investment Investment[]
  Investor   Investor[]   @relation("updatedBy")
}

model Expenses {
  id            String @id @default(uuid())
  name          String
  amount        Float
  forInvestorId String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  paid Float  @default(0.0)
  doc  Docs[]

  byInvestor Investor @relation(fields: [forInvestorId], references: [id])
}

model MaintenanceExpense {
  id     String @id @default(uuid())
  amount Float
  paid   Float  @default(0.0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  doc        Docs[]
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String   @unique

  investors  Investor? @relation(fields: [investorId], references: [id])
  investorId String?   @unique
}

model Docs {
  id        String    @id @default(uuid())
  name      String
  url       String
  type      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  Expenses             Expenses?           @relation(fields: [expensesId], references: [id])
  expensesId           String?
  MaintenanceExpense   MaintenanceExpense? @relation(fields: [maintenanceExpenseId], references: [id])
  maintenanceExpenseId String?
  Investment           Investment?         @relation(fields: [investmentId], references: [id])
  investmentId         String?
  Property             Property?           @relation(fields: [propertyId], references: [id])
  propertyId           String?
  Agent                Agent?              @relation(fields: [agentId], references: [id])
  agentId              String?
}
